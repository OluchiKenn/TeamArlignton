from functools import wraps
from flask import Blueprint, request, jsonify, render_template, session, redirect, url_for
from app.models import db, User

users_bp = Blueprint("users_bp", __name__)

# --------- Helpers & Decorators (REAL auth/RBAC) ---------
def current_db_user():
    """Return the DB user row for the currently signed-in O365 user (or None)."""
    info = session.get("user")  # set by your O365 login flow
    if not info:
        return None
    email = info.get("email") or info.get("preferred_username")
    if not email:
        return None
    return User.query.filter(func.lower(User.email) == email.lower()).first()

def require_login(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        if "user" not in session:
            # Adjust 'auth_bp.login' to the actual endpoint name of your login route if 
different
            return redirect(url_for("auth_bp.login"))
        return f(*args, **kwargs)
    return wrapper

def require_admin(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        # must be logged in
        if "user" not in session:
            return redirect(url_for("auth_bp.login"))
        me = current_db_user()
        # must exist in DB, be active, and be admin
        if not me or me.status != "active" or me.role != "admin":
            return jsonify({"error": "Forbidden (admin only)"}), 403
        return f(*args, **kwargs)
    return wrapper

# --------- UI Page (admin only) ---------
@users_bp.get("/")  # http://localhost:5000/users/
@require_login
@require_admin
def users_page():
    users = User.query.order_by(User.created_at.desc()).all()
    return render_template("users.html", users=users)

# --------- JSON API (admin only) ---------
@users_bp.get("/api")  # list users (JSON)
@require_login
@require_admin
def list_users_api():
    users = User.query.order_by(User.created_at.desc()).all()
    return jsonify([u.as_dict() for u in users])

@users_bp.post("/api")  # create user
@require_login
@require_admin
def create_user_api():
    data = request.get_json(force=True, silent=True) or {}
    name = data.get("name")
    email = data.get("email")
    role = (data.get("role") or "basicuser").lower()
    status = (data.get("status") or "active").lower()

    if not name or not email:
        return jsonify({"error": "name and email required"}), 400
    if role not in ("admin", "basicuser"):
        return jsonify({"error": "role must be 'admin' or 'basicuser'"}), 400
    if status not in ("active", "deactivated"):
        return jsonify({"error": "status must be 'active' or 'deactivated'"}), 400

    # Prevent duplicate emails
    if User.query.filter_by(email=email).first():
        return jsonify({"error": "email already exists"}), 400

    u = User(name=name, email=email, role=role, status=status)
    db.session.add(u)
    db.session.commit()
    return jsonify(u.as_dict()), 201

@users_bp.put("/api/<int:user_id>")  # update user
@require_login
@require_admin
def update_user_api(user_id):
    u = User.query.get(user_id)
    if not u:
        return jsonify({"error": "not found"}), 404

    data = request.get_json(force=True, silent=True) or {}

    if "name" in data and data["name"]:
        u.name = data["name"]
    if "email" in data and data["email"]:
        # block changing to a duplicate email
        exists = User.query.filter(User.email == data["email"], User.id != u.id).first()
        if exists:
            return jsonify({"error": "email already exists"}), 400
        u.email = data["email"]
    if "role" in data and data["role"]:
        role = data["role"].lower()
        if role not in ("admin", "basicuser"):
            return jsonify({"error": "role must be 'admin' or 'basicuser'"}), 400
        u.role = role
    if "status" in data and data["status"]:
        status = data["status"].lower()
        if status not in ("active", "deactivated"):
            return jsonify({"error": "status must be 'active' or 'deactivated'"}), 400
        u.status = status

    db.session.commit()
    return jsonify(u.as_dict())

@users_bp.delete("/api/<int:user_id>")  # delete user
@require_login
@require_admin
def delete_user_api(user_id):
    u = User.query.get(user_id)
    if not u:
        return jsonify({"error": "not found"}), 404
    db.session.delete(u)
    db.session.commit()
    return jsonify({"ok": True})

@users_bp.post("/api/<int:user_id>/deactivate")  # set status to deactivated
@require_login
@require_admin
def deactivate_user_api(user_id):
    u = User.query.get(user_id)
    if not u:
        return jsonify({"error": "not found"}), 404
    u.status = "deactivated"
    db.session.commit()
    return jsonify(u.as_dict())

@users_bp.post("/api/<int:user_id>/reactivate")  # set status to active
@require_login
@require_admin
def reactivate_user_api(user_id):
    u = User.query.get(user_id)
    if not u:
        return jsonify({"error": "not found"}), 404
    u.status = "active"
    db.session.commit()
    return jsonify(u.as_dict())

